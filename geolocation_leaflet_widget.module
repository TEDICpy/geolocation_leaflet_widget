<?php

/**
* @file
* Leaflet widget and formaters for Geolocation.
*/

// // Load node.admin.inc from the node module.
//  module_load_include('inc', 'node', 'node.admin');
//  // Load content_types.inc from the node module.
//  module_load_include('inc', 'node', 'content_types');
// module_load_include('inc', 'geolocation_leaflet_wigdet', 'settings');

/**
 * Implements hook_field_formatter_settings_form().
 */
function geolocation_leaflet_widget_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {

  $display = $instance['display'][$view_mode];
  $type = $display['type'];
  $settings = $display['settings'];

  $element = array();

  // Implement some configuration options.
  $element['map_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Map width'),
    '#description' => t('Enter custom map width (e.g. 300px or 300%), default is 300px. Percentages do not work with static maps.'),
    '#default_value' => $settings['map_width'],
  );

  $element['map_height'] = array(
    '#type' => 'textfield',
    '#title' => t('Map height'),
    '#description' => t('Enter custom map height (e.g. 300px or 300%), default is 300px. Percentages do not work with static maps.'),
    '#default_value' => $settings['map_height'],
  );

  // $element['marker_icon'] = array(
  //   '#type' => 'textfield',
  //   '#title' => t('Marker icon'),
  //   '#description' => t('Set the path to the icon marker you wish to use. Path can be absolute (with http://) or relative to the Drupal instalation. If left blank, the default will be used'),
  //   '#default_value' => $settings['marker_icon'],
  // );

  $element['map_scrollwheel'] = array(
    '#type' => 'checkbox',
    '#title' => t('Scroll Zoom'),
    '#description' => t('By default zooming is done with double click and/or using the map controls to avoid interrupting the normal window scroll. It can optionally be enabled here.'),
    '#default_value' => $settings['map_scrollwheel'],
  );

  $element['map_zoomlevel'] = array(
    '#type' => 'select',
    '#title' => t('Zoom level'),
    '#options' => array(
      '1' => '1',
      '2' => '2',
      '3' => '3',
      '4' => '4',
      '5' => '5',
      '6' => '6',
      '7' => '7 (default)',
      '8' => '8',
      '9' => '9',
      '10' => '10',
      '11' => '11',
      '12' => '12',
      '13' => '13',
      '14' => '14',
      '15' => '15',
      '16' => '16',
      '17' => '17',
      '18' => '18',
      '19' => '19',
    ),
    '#description' => t('Choose a custom zoom level - the higher the number the closer. <em>High zoom warning:</em> Google might not return images for any combination of Map Type and Zoom Level.'),
    '#default_value' => $settings['map_zoomlevel'],
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function geolocation_leaflet_widget_field_formatter_settings_summary($field, $instance, $view_mode) {

  $display = $instance['display'][$view_mode];
  $type = $display['type'];
  $settings = $display['settings'];

  $summary = t("<strong>Map:</strong> !mapwidth by !mapheight", array('!mapwidth' => $settings['map_width'], '!mapheight' => $settings['map_height']));
  $summary .= '<br />';
  $scrl = $settings['map_scrollwheel'] ? t('Yes') : t('No');
  $summary .= '<strong>Scrollable:</strong> ' . $scrl . '<br />';

  $summary .= '<strong>Zoom:</strong> ' . $settings['map_zoomlevel'];
  // if (!empty($settings['marker_icon'])) {
  //   $vars = array(
  //     'path' => $settings['marker_icon'],
  //   );
  //   $summary .= '<br /><strong>Icon:</strong> ' . theme('image', $vars);
  // }
  return $summary;
}


/**
* Implements hook_field_formatter_info().
*/
function geolocation_leaflet_widget_field_formatter_info() {
  return array(
    'geolocation_leaflet_widget_map' => array(
      'label' => t('Leaflet Map'),
      'field types' => array('geolocation_latlng','geofield'),
      'settings' => array(
        'map_width' => '100%',
        'map_height' => '300px',
        'map_zoomlevel' => '7',
        'map_imageformat' => 'png8',
        'map_link' => 0,
        'map_maptype' => 'roadmap',
        'marker_icon' => '',
        'map_scrollwheel' => '',
      ),
    ),
  );
}

/**
* Implements hook_field_formatter_view().
*/
function geolocation_leaflet_widget_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'];
  // $settings['api_key'] = variable_get('geolocation_googlemaps_api_key', '');

  $element = array();
  $lat_key = 'lat';

  // $height = 0; //FIXME extraer desde las opciones que comento para que no de problemas
  // $width = 0;

  //FIXME arreglar form settings
  if (strpos($settings['map_height'], 'px')) {
    $height = strtok($settings['map_height'], 'p');
  }
  elseif (strpos($settings['map_height'], '%')) {
    $height = strtok($settings['map_height'], '%');
  }
  elseif (!strpos($settings['map_height'], '%') || !strpos($settings['map_height'], 'px')) {
    $height = $settings['map_height'];
  }

  if (strpos($settings['map_width'], 'px')) {
    $width = strtok($settings['map_width'], 'p');
  }
  elseif (strpos($settings['map_width'], '%')) {
    $width = strtok($settings['map_width'], '%');
  }
  elseif (!strpos($settings['map_width'], '%') || !strpos($settings['map_width'], 'px')) {
    $width = $settings['map_width'];
  }

  $lng_key = ($field['type'] == 'geofield') ? 'lon' : 'lng';


  switch ($display['type']) {

    case 'geolocation_leaflet_widget_map':

    $info = entity_get_info($entity_type);
    $key = isset($info['entity keys']['name']) ? $info['entity keys']['name'] : $info['entity keys']['id'];
    $eid = $entity->$key;

    foreach ($items as $delta => $item) {

      // $height = 0; // extraer desde las opciones que comento para que no de problemas
      // $width = 0;
      $width = $settings['map_width'];
      $height = $settings['map_height'];

      $id = 'e_' . $eid . 'i_' . $instance['id'] . '-d_' . $delta;
      // $id = 'geolocation_leaflet_widget-' . 'e_' . $eid . 'i_' . $instance['id'] . '-d_' . $delta;
      $map_element['leaflet'] = array(
        '#markup' => '<div id="geolocation-map-' . $id . '" class="geolocation-map"  style="width:' . htmlentities($width) . ';height:' . htmlentities($height) . ';"></div>',
      );

      // Attach CSS and JS files via FAPI '#attached'.
      $map_element['leaflet']['#attached']['css'][] = drupal_get_path('module', 'geolocation_leaflet_widget') . '/geolocation_leaflet_widget.css';

      geolocation_leaflet_atach($map_element);
      $map_element['leaflet']['#attached']['js'][] = array(
        'data' => drupal_get_path('module', 'geolocation_leaflet_widget') . '/geolocation_leaflet_map.js',
        'type' => 'file',
        'scope' => 'footer',
      );

      // Create correct url for marker_icon
      //FIXME arrelar settings
      // if ($settings['marker_icon']) {
      //   $settings['marker_icon'] = file_create_url($settings['marker_icon']);
      // }

      // Add each delta to the settings array.
      $data = array(
        'formatters' => array(
          'e_' . $eid . 'i_' . $instance['id'] => array(
            "settings" => $settings,
            "deltas" => array(
              'd_' . $delta => array(
                'lat' => $item[$lat_key],
                'lng' => $item[$lng_key],
              ),
            ),
          ),
        ),
        'lat' => $item[$lat_key],
        'lng' => $item[$lng_key],
      );

      $map_element['leaflet']['#attached']['js'][] = array(
        'data' => array('geolocation' => $data),
        'type' => 'setting',
      );

      $element[$delta] = $map_element;
    }
    break;
  }
  return $element;
}

/**
* Implements hook_field_widget_info().
*/
function geolocation_leaflet_widget_field_widget_info() {
  return array(
    'geolocation_leaflet_widget' => array(
      'label' => t('Leaflet widget'),
      'field types' => array('geolocation_latlng','geofield'),
      'settings' => array(
        'scrollwheel' => TRUE,
        'zoom' => '7',
        'map_height' => '300px',
      ),
    ),
  );
}

function geolocation_leaflet_widget_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  $form['scrollwheel'] = array(
    '#type' => 'checkbox',
    '#title' => t('Scroll Zoom'),
    '#description' => t('By default zooming is done with double click and/or using the map controls to avoid interrupting the normal window scroll. It can optionally be enabled here.'),
    '#default_value' => isset($settings['scrollwheel']) ? $settings['scrollwheel'] : FALSE,
  );
  $form['zoom'] = array(
    '#type' => 'select',
    '#title' => t('Initial Zoom'),
    '#options' => array(
      '1' => '1',
      '2' => '2',
      '3' => '3',
      '4' => '4',
      '5' => '5',
      '6' => '6',
      '7' => '7 (default)',
      '8' => '8',
      '9' => '9',
      '10' => '10',
      '11' => '11',
      '12' => '12',
      '13' => '13',
      '14' => '14',
      '15' => '15',
      '16' => '16',
      '17' => '17',
      '18' => '18',
      '19' => '19',
    ),
    '#description' => t('Choose a custom zoom level - the higher the number the closer. <em>High zoom warning:</em> Google might not return images for any combination of Map Type and Zoom Level.'),
    '#default_value' => $settings['zoom'],
  );

  $form['map_height'] = array(
    '#type' => 'textfield',
    '#title' => t('Map height'),
    '#description' => t('Enter custom map height (e.g. 300px or 300%), default is 300px. Percentages do not work with static maps.'),
    '#default_value' => $settings['map_height'],
  );


  return $form;
}
/**
* Implements hook_field_widget_form().
*/
function geolocation_leaflet_widget_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  // In order to make Geolocation field work with the popular Field collection module
  // we check if our map widget is part of a Field collection and add the
  // #field_parents delta.
  if ($instance['entity_type'] == 'field_collection_item') {
    $depth = count($element['#field_parents']) - 1;
    $parent_delta = $element['#field_parents'][$depth];
    $id = $instance['id'] . '-' . $parent_delta . '-' . $delta;
  }
  else {
    $id = $instance['id'] . '-' . $delta;
  }

  $lat_value = isset($items[$delta]['lat']) ? $items[$delta]['lat'] : NULL;
  // To make this widget compatible with geofiled we need to rename the keys for
  // longitude. Geofield uses "lon" while Geolocation Field uses "lng".
  if ($field['type'] == 'geofield') {
    $lng_value = isset($items[$delta]['lon']) ? $items[$delta]['lon'] : NULL;
  }
  else {
    $lng_value = isset($items[$delta]['lng']) ? $items[$delta]['lng'] : NULL;
  }
  $element += array(
    '#delta' => $delta,
  );

  switch ($instance['widget']['type']) {

    case 'geolocation_leaflet_widget':

    $element['help'] = array(
      '#prefix' => '<div id="geolocation-help-' . $id . '" class="geolocation-help">',
      '#suffix' => '</div>',
      '#markup' => t('Click on map to place a marker. If you want, you can drag it.'),
    );
    $element['leaflet'] = array(
      '#markup' => '<div id="geolocation-map-' . $id . '" class="geolocation-map" style="width:100%;height:400px;">',
    );
    $element['lat'] = array(
      '#type' => 'hidden',
      '#prefix' => '<div id="geolocation-lat-' . $id . '" class="geolocation-lat">',
      '#suffix' => '</div>',
      '#default_value' => $lat_value,
    );
    $element['lng'] = array(
      '#type' => 'hidden',
      '#prefix' => '<div id="geolocation-lng-' . $id . '" class="geolocation-lng">',
      '#suffix' => '</div>',
      '#default_value' => $lng_value,
    );
    // Presentational item.
    // $element['latitem'] = array(
    //   '#type' => 'item',
    //   '#title' => t('Latitude:'),
    //   '#prefix' => '<div id="geolocation-lat-item-' . $id . '" class="geolocation-lat-item">',
    //   '#suffix' => '</div>',
    //   '#markup' => '<span class="geolocation-lat-item-value">' . $lat_value . '</span>',
    //   '#required' => $instance['required'],
    // );
    // Presentational item.
    // $element['lngitem'] = array(
    //   '#type' => 'item',
    //   '#title' => t('Longitude:'),
    //   '#prefix' => '<div id="geolocation-lng-item-' . $id . '" class="geolocation-lng-item">',
    //   '#suffix' => '</div>',
    //   '#markup' => '<span class="geolocation-lat-item-value">' . $lat_value . '</span>',
    //   '#required' => $instance['required'],
    // );


    // Attach CSS and JS files via FAPI '#attached'.
    $element['leaflet']['#attached']['js'][] = array(
      'data' => drupal_get_path('module', 'geolocation_leaflet_widget') . '/geolocation_leaflet_widget.js',
      'type' => 'file',
      'scope' => 'footer',
    );
    geolocation_leaflet_atach($element);

    // Make defaults available as javascript settings. In JS files use:
    // Drupal.settings.mapDefaults.lat
    $map_defaults_lat = ($lat_value) ? $lat_value : '0';
    $map_defaults_lng = ($lng_value) ? $lng_value : '0';
    $map_defaults = array(
      $id => array(
        'lat' => $map_defaults_lat,
        'lng' => $map_defaults_lng,
      ),
    );
    $data = array(
      'defaults' => $map_defaults,
      'settings' => $instance['widget']['settings'],
    );
    $element['leaflet']['#attached']['js'][] = array(
      'data' => array('geolocation' => $data),
      'type' => 'setting',
    );

    $element['field_type'] = array('#type' => 'value', '#value' => $field['type']);
    $element['#element_validate'] = array('geolocation_leaflet_widget_field_widget_validate');
    $element['#element_validate'][] = 'geolocation_leaflet_widget_field_widget_set_value';

    break;
  }
  return $element;
}


/**
* Validation handler for geolocation_leaflet_widget_field_widget_form().
*/
function geolocation_leaflet_widget_field_widget_validate($element, &$form_state, $form) {
  if ($element['#required']) {
    if ($element['save']['#value'] && (!$element['lat']['#value'] || !$element['lng']['#value'])) {
      form_error($element,
       t('!name field is required. Don\'t click the map to place a marker.',
      array('!name' => $element['#title'])));
    }
  }
}

function geolocation_leaflet_widget_field_widget_set_value($element, &$form_state, $form) {
  $values = &drupal_array_get_nested_value($form_state['values'], $element['#parents']);
  if ($values['field_type'] == 'geofield') {
    // Geofield needs the values in their own format which is exactly what
    // geofield_compute_values does, but we have to change first the longitude
    // key because geofield uses a different one.
    $values['lon'] = $values['lng'];
    $values = geofield_compute_values($values);
  }
}

/**
* Implements hook_field_widget_error().
*/
function geolocation_leaflet_widget_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'geolocation_invalid':
    form_error($element, $error['message']);
    break;
  }
}

// /**
// * Implements hook_modernizr_info().
// */
// function geolocation_leaflet_widget_modernizr_info() {
//   $tests = array();
//   $tests[] = 'geolocation';
//
//   return $tests;
// }


/**
 * Implements hook_field_widget_form_alter().
 */
function geolocation_leaflet_widget_field_widget_form_alter(&$element, &$form_state, $context) {
  // Attaches widget JS to each media reference widget.
  if (isset($element['#type']) && $element['#type'] == 'media') {
    geolocation_leaflet_atach($element);
  }
}

/**
* Helper function that attaches JS to the given element.
* @param array $element
*/
function geolocation_leaflet_atach(&$element) {
  // $js_added_already = &drupal_static(__FUNCTION__, FALSE);
  // if (!$js_added_already) {
    $element['#attached']['js'][] = array(
      'data' => '//cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js',
      'type' => 'external',
    );
    $element['#attached']['css'][] = array(
      'data' => '//cdn.leafletjs.com/leaflet/v0.7.7/leaflet.css',
      'type' => 'external',
    );
    // $js_added_already = TRUE;
  // }
}
